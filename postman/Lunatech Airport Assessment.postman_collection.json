{
	"info": {
		"_postman_id": "3431b0bb-a229-48be-80d5-51d9e043b8f6",
		"name": "Lunatech Airport Assessment",
		"description": "This collection is used as a testbed for each LT Airport Assessment implementation on the Airports at Scale blogposts.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Country",
			"item": [
				{
					"name": "Country by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response name matches data', function () {",
									"    if (pm.response.status === \"OK\") {",
									"        var name = pm.variables.get('name');",
									"        var json = pm.response.json();",
									"",
									"        pm.expect(json.name).to.equal(name);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/countries?code={{code}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"countries"
							],
							"query": [
								{
									"key": "code",
									"value": "{{code}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Country by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response name matches data', function () {",
									"    if (pm.response.status === \"OK\") {",
									"        var code = pm.variables.get('code');",
									"        var json = pm.response.json();",
									"",
									"        pm.expect(json.code).to.equal(code);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/countries?name={{name}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"countries"
							],
							"query": [
								{
									"key": "name",
									"value": "{{name}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Country by name (fuzzy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Response name matches data', function () {",
									"    if (pm.response.status === \"OK\") {",
									"        var code = pm.variables.get('code');",
									"        var json = pm.response.json();",
									"",
									"        pm.expect(json.code).to.equal(code);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/countries?name={{fuzzyName}}&fuzzy=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"countries"
							],
							"query": [
								{
									"key": "name",
									"value": "{{fuzzyName}}"
								},
								{
									"key": "fuzzy",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Top Airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get at least countries as requested', function() {",
									"    if (pm.response.status === \"OK\") {",
									"        let json = pm.response.json();",
									"        let limit = pm.variables.get('limit');",
									"",
									"        pm.expect(json.length).to.equal(limit);",
									"",
									"        let expected = pm.variables.get('expected');",
									"        let names = json.map((x) => x.name);",
									"        pm.expect(names).to.deep.equal(expected);",
									"    };",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/reports/top-airports?limit={{limit}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"top-airports"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Common Runways",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get at least runways as requested', function() {",
									"    if (pm.response.status === \"OK\") {",
									"        let json = pm.response.json().runways;",
									"        let limit = pm.variables.get('limit');",
									"",
									"        pm.expect(json.length).to.equal(limit);",
									"",
									"        let expected = pm.variables.get('expected');",
									"        let names = json.map((x) => x.name);",
									"        pm.expect(names).to.deep.equal(expected);",
									"    };",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/reports/common-runways?limit={{limit}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"common-runways"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Runways per Country",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get correct runways', function() {",
									"    if (pm.response.status === \"OK\") {",
									"        let json = pm.response.json().runwaysPerCountry;",
									"        pm.expect(json['Argentina']).to.have.lengthOf(7);",
									"        pm.expect(json['Netherlands']).to.have.lengthOf(7);",
									"    };",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/reports/runways",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"runways"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bottom Airports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get at least countries as requested', function() {",
									"    if (pm.response.status === \"OK\") {",
									"        let json = pm.response.json();",
									"        let limit = pm.variables.get('limit');",
									"",
									"        pm.expect(json.length).to.equal(limit);",
									"",
									"        let expected = pm.variables.get('expected');",
									"        let names = json.map((x) => x.name);",
									"        pm.expect(names).to.deep.equal(expected);",
									"    };",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/reports/bottom-airports?limit={{limit}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reports",
								"bottom-airports"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let endpoint = pm.request.url.path[ pm.request.url.path.length - 1 ];",
					"let testVars = pm.iterationData.get(endpoint);",
					"for (let key in testVars) {",
					"    pm.variables.set(key, testVars[key]);",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Status code is expected', function () {",
					"    var statusCode = pm.variables.get('responseCode');",
					"",
					"    pm.response.to.have.status(statusCode);",
					"});"
				]
			}
		}
	]
}